@@templateConstStringName@@
QString const @@templateVariableName@@ = "@@templateFileName@@";
==========
@@replacePropertyName@@
	mApi.property(element, "@@propertyName@@").toString();
==========
@@oneSemanticGenerateBody@@
	QString res_@@count@@ = "";
	foreach (Id const &element_@@count@@, mApi.elementsByType("@@elementName@@")) {
		if (!mApi.isLogicalElement(element_@@count@@)) {
			continue;
		}
@@foreachGenerateBody@@
@@converterGenerateBody@@
@@replaceTemplateGenerateBody@@
	}
	mTemplateUtils["@@elements_@@elementName@@@@"] = res_@@count@@;
	result += res_@@count@@;
==========
@@beforeAllForeachGenerateBody@@
	mTemplateUtils["@@@@foreachMarkName@@@@"] = "";
==========
@@oneForeachGenerateBody@@
	QString res_@@count@@ = "";
	foreach (Id const &element_@@count@@, mApi.children(element_@@parentCount@@)) {
		if (!mApi.isLogicalElement(element_@@count@@) || element_@@count@@.element() != "@@elementName@@") {
			continue;
		}
@@foreachGenerateBody@@
@@converterGenerateBody@@
@@replaceTemplateGenerateBody@@
	}
	mTemplateUtils["@@@@foreachMarkName@@@@"] += res_@@count@@;
==========
@@oneReplaceTemplateGenerateBody@@
QString res@@tailName@@_one_@@count@@ = mTemplateUtils["@@@@elementMarkName@@@@"];
@@replaceTemplates@@
res@@tailName@@_@@count@@ += res@@tailName@@_one_@@count@@ + "\n";
==========
@@oneSimpleReplaceTemplate@@
res@@tailName@@_one_@@count@@.replace("@@templateMarkName@@", mTemplateUtils["@@templateMarkName@@"]);
==========
@@oneWithPropertyReplaceTemplate@@
res@@tailName@@_one_@@count@@.replace("@@templateMarkName@@", mApi.property(@@realElementForProperty@@, "@@templatePropertyName@@").toString());
==========
@@oneWithPropertyReplaceTemplateForDiagram@@
res@@tailName@@_@@realTemplateMarkName@@.replace("@@templateMarkName@@", mLogicalModel->logicalRepoApi().property(diagram, "@@templatePropertyName@@").toString());
==========
@@realElementMarkName@@
elements_@@elementName@@_@@count@@
==========
@@oneReplaceTemplateGenerateBodyForFile@@
QString result@@tailName@@_@@templateVariableName@@ = "";
loadTemplateFromFile(@@templateVariableName@@, result@@tailName@@_@@templateVariableName@@);
@@replaceTemplates@@
saveOutputFile("@@templateFileName@@", result@@tailName@@_@@templateVariableName@@);
==========
@@oneSimpleReplaceTemplateForFile@@
result@@tailName@@_@@templateVariableName@@.replace("@@templateMarkName@@", mTemplateUtils["@@templateMarkName@@"]);
==========
@@oneWithPropertyReplaceTemplateForFile@@
result@@tailName@@_@@templateVariableName@@.replace("@@templateMarkName@@", mApi.property(element_@@count@@, "@@templatePropertyName@@").toString());
==========
@@onefillMarkProperty@@
QString res@@tailName@@_@@realTemplateMarkName@@ = "@@textCode@@";
@@replaceTemplates@@
marksProperty["@@realTemplateMarkName@@"] = res@@tailName@@_@@realTemplateMarkName@@;
==========
@@oneSemanticEdgeGenerateBody@@
	QString res_Links_@@count@@ = "";
	foreach (Id const &element_@@count@@, @@srcList@@) {
		if (!mApi.isLogicalElement(element_@@count@@)) {
			continue;
		}
		IdList list = mApi.outgoingNodes(element_@@count@@); // TODO_need only "@@elementName@@"
@@dstGenerateBody@@
	}
	mTemplateUtils["@@elements_@@elementName@@_@@fullSrcElementName@@_@@fullDstElementName@@@@"] = res_Links_@@count@@;
	result_Links += res_Links_@@count@@;
==========
@@oneSrcList@@
mApi.elementsByType("@@oneSrcElementName@@")
==========
@@oneDstGenerateBody@@
	foreach (Id const &outElement, list) {
		if (!mApi.isLogicalElement(outElement)|| outElement.element() != "@@dstElementName@@") {
			continue;
		}
@@replaceTemplateGenerateBodyForEdge@@
	}
==========
@@oneDstGenerateBodyForANY@@
	foreach (Id const &outElement, list) {
		if (!mApi.isLogicalElement(outElement)) {
			continue;
		}
@@replaceTemplateGenerateBodyForEdge@@
	}
==========